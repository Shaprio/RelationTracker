{% extends 'base.html.twig' %}

{% block title %}
    Meetings
{% endblock %}

{% block content %}
    <div class="header">
        <h1>Meetings</h1>
        <button id="addEventBtn">Add New Event</button>
    </div>

    <div class="meeting-list">
        {% for event in events %}
            <div class="meeting-item">
                <div class="meeting-details">
                    <h3>{{ event.title }}</h3>
                    <p><strong>Description:</strong> {{ event.description }}</p>
                    <p><strong>Date:</strong> {{ event.date|date('Y-m-d H:i') }}</p>
                    <p><strong>Contacts:</strong>
                        {% for contact in event.contact %}
                            {{ contact.contact.name }}{% if not loop.last %}, {% endif %}
                        {% endfor %}
                    </p>
                </div>
                <div class="meeting-actions">
                    <button class="editEventBtn" data-id="{{ event.id }}">Edit</button>
                    <button
                        class="important-btn {{ event.isImportant ? 'marked' : '' }}"
                        data-id="{{ event.id }}"
                        data-type="meeting">
                        {{ event.isImportant ? 'Unmark Important' : 'Mark as Important' }}
                    </button>
                    <button class="deleteEventBtn" data-id="{{ event.id }}">Delete</button>
                </div>
            </div>
        {% else %}
            <p>No meetings available.</p>
        {% endfor %}
    </div>

    <!-- Modal -->
    <div class="modal" id="eventModal">
        <div class="modal-content">
            <form method="POST" action="/meetings">
                <input type="hidden" name="event_id" id="eventId">
                <input type="text" name="title" id="eventTitle" placeholder="Title" required>
                <textarea name="description" id="eventDescription" placeholder="Description"></textarea>
                <input type="datetime-local" name="date" id="eventDate" required>
                <label>Contacts:</label>
                <select name="contacts[]" id="eventContacts" multiple>
                    {% for contact in contacts %}
                        <option value="{{ contact.id }}">{{ contact.name }}</option>
                    {% endfor %}
                </select>
                <button type="submit">Save</button>
            </form>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        // JavaScript logic for modal
        const modal = document.getElementById('eventModal');
        const addEventBtn = document.getElementById('addEventBtn');
        const editEventBtns = document.querySelectorAll('.editEventBtn');
        const importantBtns = document.querySelectorAll('.important-btn');
        const deleteEventBtns = document.querySelectorAll('.deleteEventBtn');

        // Open Add Event Modal
        if (addEventBtn) {
            addEventBtn.addEventListener('click', () => {
                if (modal) {
                    modal.style.display = 'flex';
                    document.getElementById('eventId').value = '';
                    document.getElementById('eventTitle').value = '';
                    document.getElementById('eventDescription').value = '';
                    document.getElementById('eventDate').value = '';

                    const eventContacts = document.getElementById('eventContacts');
                    Array.from(eventContacts.options).forEach(option => {
                        option.selected = false;
                    });
                }
            });
        }

        // Edit Event Modal
        editEventBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                if (modal) {
                    modal.style.display = 'flex';
                    const parent = btn.closest('.meeting-item');

                    document.getElementById('eventId').value = btn.getAttribute('data-id') || '';
                    document.getElementById('eventTitle').value = parent.querySelector('h3').textContent || '';
                    document.getElementById('eventDescription').value =
                        parent.querySelector('p:nth-of-type(1)').textContent.split(': ')[1] || '';
                    document.getElementById('eventDate').value =
                        parent.querySelector('p:nth-of-type(2)').textContent.split(': ')[1] || '';
                }
            });
        });

        // Toggle Important Logic
        importantBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const eventId = btn.getAttribute('data-id');
                const isImportant = btn.classList.contains('marked');

                fetch(`/meetings/${eventId}/important`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ important: !isImportant })
                })
                    .then(response => {
                        if (!response.ok)
                            throw new Error('Failed to update importance');
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            btn.classList.toggle('marked');
                            btn.textContent = isImportant
                                ? 'Mark as Important'
                                : 'Unmark Important';
                        }
                    })
                    .catch(error => console.error('Error:', error));
            });
        });

        // Delete Event
        deleteEventBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const eventId = btn.getAttribute('data-id');
                if (confirm('Are you sure you want to delete this meeting?')) {
                    fetch(`/meetings/${eventId}/delete`, {
                        method: 'DELETE'
                    })
                        .then(response => {
                            if (!response.ok) throw new Error('Failed to delete event');
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                btn.closest('.meeting-item').remove();
                            }
                        })
                        .catch(error => console.error('Error:', error));
                }
            });
        });

        // Close Modal on Outside Click
        window.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.style.display = 'none';
            }
        });
    </script>
{% endblock %}
