<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Recurring Events</title>
    <style>
        /* General styles */
        body {
            font-family: Arial, sans-serif;
            display: flex;
            margin: 0;
            height: 100vh;
            background-color: #f9f9f9;
        }

        .sidebar {
            width: 15%;
            background-color: #1E3A5F;
            color: #fff;
            display: flex;
            flex-direction: column;
            padding: 1.5rem;
        }

        .sidebar a {
            text-decoration: none;
            color: #fff;
            padding: 0.8rem 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
        }

        .sidebar a:hover {
            background-color: #3b5c87;
        }

        .sidebar .logout {
            margin-top: auto;
            background-color: #FF6666;
            padding: 0.8rem 1rem;
            text-align: center;
            border-radius: 4px;
        }

        .content {
            flex: 1;
            padding: 2rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header button {
            padding: 0.6rem 1.2rem;
            background-color: #1E3A5F;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
        }

        .header button:hover {
            background-color: #3b5c87;
        }

        .event-list {
            overflow-y: auto;
            max-height: calc(100vh - 150px);
        }

        .event-item {
            background-color: #76B6F8;
            color: white;
            padding: 1rem;
            border-radius: 4px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .event-item .details {
            display: flex;
            gap: 1rem;
        }

        .event-item button {
            padding: 0.5rem 1rem;
            background-color: white;
            color: #76B6F8;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }

        .event-item button:hover {
            background-color: #fff;
            color: #3b5c87;
        }

        .important-btn {
            background-color: white;
            color: #FFD700;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: 40%;
        }

        .modal-content form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .modal-content input, .modal-content select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .modal-content button {
            padding: 0.5rem 1rem;
            background-color: #1E3A5F;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .modal-content button:hover {
            background-color: #3b5c87;
        }
    </style>
</head>
<body>
<div class="sidebar">
    <a href="/mainPage">Dashboard</a>
    <a href="/meetings">Meetings</a>
    <a href="/friends">Friends</a>
    <a href="/notifications" class="active">Notifications</a>
    <a href="/recurring-events">Recurring Events</a>
    <a href="/settings">Settings</a>
    <a href="/logout" class="logout">Logout</a>
</div>

<div class="content">
    <div class="header">
        <h1>Recurring Events</h1>
        <button id="addEventBtn">Add New Event</button>
    </div>

    <div class="event-list">
        {% for event in events %}
            <div class="event-item">
                <div class="details" style="flex: 1; display: flex; gap: 1rem; justify-content: flex-start;">
                    <p><strong>Title:</strong> {{ event.title }}</p>
                    <p><strong>Date:</strong> {{ event.startDate|date('Y-m-d') }}</p>
                    <p><strong>Recurrence:</strong> {{ event.recurrencePattern }}</p>
                </div>
                <div class="buttons">
                    <button class="detailsEventBtn" data-id="{{ event.id }}">Details</button>
                    <button class="editEventBtn" data-id="{{ event.id }}">Edit</button>
                    <button class="deleteEventBtn" data-id="{{ event.id }}">Delete</button>
                    <button
                        class="importantEventBtn {% if event.isImportant %}important-btn{% endif %}"
                        data-id="{{ event.id }}"
                        data-important="{{ event.isImportant }}">
                        {{ event.isImportant ? 'Unmark Important' : 'Mark as Important' }}
                    </button>
                </div>
            </div>
        {% else %}
            <p>No events available.</p>
        {% endfor %}
    </div>
</div>

<!-- Modal for Adding/Editing Event -->
<div class="modal" id="eventModal">
    <div class="modal-content">
        <h2 id="modalTitle">Add Event</h2>
        <form method="POST" action="/recurring-events">
            <input type="hidden" name="event_id" id="eventId">
            <input type="text" name="title" id="eventTitle" placeholder="Title" required>
            <textarea name="description" id="eventDescription" placeholder="Description"></textarea>
            <select name="recurrence_pattern" id="eventRecurrencePattern" required>
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
                <option value="yearly">Yearly</option>
            </select>
            <input type="date" name="start_date" id="eventStartDate" required>
            <label for="contacts">Assign Contacts:</label>
            <select name="contacts[]" id="eventContacts" multiple>
                {% for contact in contacts %}
                    <option value="{{ contact.id }}">{{ contact.name }}</option>
                {% endfor %}
            </select>
            <button type="submit">Save Event</button>
        </form>
    </div>
</div>

<!-- Modal for Event Details -->
<div class="modal" id="detailsModal">
    <div class="modal-content">
        <h2>Event Details</h2>
        <p id="detailsContent"></p>
        <button id="closeDetailsModal">Close</button>
    </div>
</div>

<script>
    const eventModal = document.getElementById('eventModal');
    const detailsModal = document.getElementById('detailsModal');
    const addEventBtn = document.getElementById('addEventBtn');
    const editEventBtns = document.querySelectorAll('.editEventBtn');
    const deleteEventBtns = document.querySelectorAll('.deleteEventBtn');
    const importantEventBtns = document.querySelectorAll('.importantEventBtn');
    const detailsEventBtns = document.querySelectorAll('.detailsEventBtn');
    const closeDetailsModal = document.getElementById('closeDetailsModal');
    const detailsContent = document.getElementById('detailsContent');

    /** Show the Add modal with cleared fields. */
    addEventBtn.addEventListener('click', () => {
        console.log('Add Event button clicked');
        eventModal.style.display = 'flex';
        document.getElementById('eventId').value = '';
        document.getElementById('eventTitle').value = '';
        document.getElementById('eventDescription').value = '';
        document.getElementById('eventRecurrencePattern').value = 'daily';
        document.getElementById('eventStartDate').value = '';
        const eventContacts = document.getElementById('eventContacts');
        Array.from(eventContacts.options).forEach(option => {
            option.selected = false;
        });
    });

    /** Handle Edit button */
    editEventBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            const eventId = btn.dataset.id;
            console.log(`Edit event with ID: ${eventId}`);

            fetch(`/recurring-events/${eventId}/details`)
                .then(response => {
                    console.log('Edit fetch status:', response.status);
                    if (!response.ok) {
                        throw new Error(`Failed to fetch details for event ID: ${eventId}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Edit fetch data:', data);
                    if (data.error) {
                        alert(data.error);
                        return;
                    }
                    // Populate the Edit modal
                    eventModal.style.display = 'flex';
                    document.getElementById('eventId').value = data.id;
                    document.getElementById('eventTitle').value = data.title;
                    document.getElementById('eventDescription').value = data.description || '';
                    document.getElementById('eventRecurrencePattern').value = data.recurrencePattern;
                    document.getElementById('eventStartDate').value = data.startDate;
                    const eventContacts = document.getElementById('eventContacts');
                    Array.from(eventContacts.options).forEach(option => {
                        option.selected = data.contacts
                            .map(contact => contact.id)
                            .includes(parseInt(option.value, 10));
                    });
                })
                .catch(err => {
                    console.error('Edit fetch error:', err);
                    alert('An error occurred while fetching event details for editing.');
                });
        });
    });

    /** Handle Details button */
    detailsEventBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            const eventId = btn.dataset.id;
            console.log(`Details for event ID: ${eventId}`);

            fetch(`/recurring-events/${eventId}/details`)
                .then(response => {
                    console.log('Details fetch status:', response.status);
                    if (!response.ok) {
                        throw new Error(`Failed to fetch details for event ID: ${eventId}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Details fetch data:', data);
                    if (data.error) {
                        alert(data.error);
                        return;
                    }
                    detailsContent.innerHTML = `
                        <p><strong>Title:</strong> ${data.title}</p>
                        <p><strong>Date:</strong> ${data.startDate}</p>
                        <p><strong>Recurrence:</strong> ${data.recurrencePattern}</p>
                        <p><strong>Description:</strong> ${data.description || 'N/A'}</p>
                        <p><strong>Contacts:</strong> ${
                        data.contacts.map(c => c.name).join(', ')
                    }</p>
                    `;
                    detailsModal.style.display = 'flex';
                })
                .catch(err => {
                    console.error('Details fetch error:', err);
                    alert('An error occurred while fetching event details.');
                });
        });
    });

    /** Handle Delete button */
    deleteEventBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            const eventId = btn.dataset.id;
            console.log(`Delete event with ID: ${eventId}`);
            if (confirm('Are you sure you want to delete this event?')) {
                fetch(`/recurring-events/${eventId}/delete`, { method: 'POST' })
                    .then(() => {
                        console.log(`Event ${eventId} deleted. Reloading page...`);
                        location.reload();
                    })
                    .catch(err => {
                        console.error('Failed to delete event:', err);
                        alert('An error occurred while deleting the event.');
                    });
            }
        });
    });

    /** Handle Mark as Important toggle */
    importantEventBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            const eventId = btn.dataset.id;
            console.log(`Toggle importance for event ID: ${eventId}`);

            fetch(`/recurring-events/${eventId}/important`, { method: 'POST' })
                .then(() => {
                    btn.classList.toggle('important-btn');
                    btn.textContent = btn.classList.contains('important-btn')
                        ? 'Unmark Important'
                        : 'Mark as Important';
                })
                .catch(err => {
                    console.error('Failed to toggle importance:', err);
                    alert('An error occurred while toggling importance.');
                });
        });
    });

    /** Close modals on outside click */
    window.addEventListener('click', (e) => {
        if (e.target === eventModal) {
            eventModal.style.display = 'none';
        }
        if (e.target === detailsModal) {
            detailsModal.style.display = 'none';
        }
    });

    /** Close details modal on button click */
    closeDetailsModal.addEventListener('click', () => {
        detailsModal.style.display = 'none';
    });
</script>

</body>

