{% extends 'base.html.twig' %}

{% block title %}
    Recurring Events
{% endblock %}

{% block content %}

    <div class="header">
        <h1>Recurring Events</h1>
        <button id="addEventBtn">Add New Event</button>
    </div>

    <div class="event-list">
        {% for event in events %}
            <div class="event-item">
                <div class="details" style="flex: 1; display: flex; gap: 1rem; justify-content: flex-start;">
                    <p><strong>Title:</strong> {{ event.title }}</p>
                    <p><strong>Date:</strong> {{ event.startDate|date('Y-m-d') }}</p>
                    <p><strong>Recurrence:</strong> {{ event.recurrencePattern }}</p>
                </div>
                <div class="buttons">
                    <button class="detailsEventBtn" data-id="{{ event.id }}">Details</button>
                    <button class="editEventBtn" data-id="{{ event.id }}">Edit</button>
                    <button class="deleteEventBtn" data-id="{{ event.id }}">Delete</button>
                    <button
                        class="importantEventBtn {% if event.isImportant %}important-btn{% endif %}"
                        data-id="{{ event.id }}"
                        data-important="{{ event.isImportant }}">
                        {{ event.isImportant ? 'Unmark Important' : 'Mark as Important' }}
                    </button>
                </div>
            </div>
        {% else %}
            <p>No events available.</p>
        {% endfor %}
    </div>

    <!-- Modal for Adding/Editing Event -->
    <div class="modal" id="eventModal">
        <div class="modal-content">
            <h2 id="modalTitle">Add Event</h2>
            <form method="POST" action="/recurring-events">
                <input type="hidden" name="event_id" id="eventId">
                <input type="text" name="title" id="eventTitle" placeholder="Title" required>
                <textarea name="description" id="eventDescription" placeholder="Description"></textarea>
                <select name="recurrence_pattern" id="eventRecurrencePattern" required>
                    <option value="daily">Daily</option>
                    <option value="weekly">Weekly</option>
                    <option value="monthly">Monthly</option>
                    <option value="yearly">Yearly</option>
                </select>
                <input type="date" name="start_date" id="eventStartDate" required>
                <label for="contacts">Assign Contacts:</label>
                <select name="contacts[]" id="eventContacts" multiple>
                    {% for contact in contacts %}
                        <option value="{{ contact.id }}">{{ contact.name }}</option>
                    {% endfor %}
                </select>
                <button type="submit">Save Event</button>
            </form>
        </div>
    </div>

    <!-- Modal for Event Details -->
    <div class="modal" id="detailsModal">
        <div class="modal-content">
            <h2>Event Details</h2>
            <p id="detailsContent"></p>
            <button id="closeDetailsModal">Close</button>
        </div>
    </div>

{% endblock %}

{% block javascripts %}
    <script>
        const eventModal = document.getElementById('eventModal');
        const detailsModal = document.getElementById('detailsModal');
        const addEventBtn = document.getElementById('addEventBtn');
        const editEventBtns = document.querySelectorAll('.editEventBtn');
        const deleteEventBtns = document.querySelectorAll('.deleteEventBtn');
        const importantEventBtns = document.querySelectorAll('.importantEventBtn');
        const detailsEventBtns = document.querySelectorAll('.detailsEventBtn');
        const closeDetailsModal = document.getElementById('closeDetailsModal');
        const detailsContent = document.getElementById('detailsContent');

        /** Show the Add modal with cleared fields. */
        addEventBtn.addEventListener('click', () => {
            eventModal.style.display = 'flex';
            document.getElementById('eventId').value = '';
            document.getElementById('eventTitle').value = '';
            document.getElementById('eventDescription').value = '';
            document.getElementById('eventRecurrencePattern').value = 'daily';
            document.getElementById('eventStartDate').value = '';
            const eventContacts = document.getElementById('eventContacts');
            Array.from(eventContacts.options).forEach(option => {
                option.selected = false;
            });
        });

        /** Handle Edit button */
        editEventBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const eventId = btn.dataset.id;
                fetch(`/recurring-events/${eventId}/details`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Failed to fetch details for event ID: ${eventId}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.error) {
                            alert(data.error);
                            return;
                        }
                        // Populate the Edit modal
                        eventModal.style.display = 'flex';
                        document.getElementById('eventId').value = data.id;
                        document.getElementById('eventTitle').value = data.title;
                        document.getElementById('eventDescription').value = data.description || '';
                        document.getElementById('eventRecurrencePattern').value = data.recurrencePattern;
                        document.getElementById('eventStartDate').value = data.startDate;
                        const eventContacts = document.getElementById('eventContacts');
                        Array.from(eventContacts.options).forEach(option => {
                            option.selected = data.contacts
                                .map(contact => contact.id)
                                .includes(parseInt(option.value, 10));
                        });
                    })
                    .catch(err => {
                        console.error('Edit fetch error:', err);
                        alert('An error occurred while fetching event details for editing.');
                    });
            });
        });

        /** Handle Details button */
        detailsEventBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const eventId = btn.dataset.id;
                fetch(`/recurring-events/${eventId}/details`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Failed to fetch details for event ID: ${eventId}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.error) {
                            alert(data.error);
                            return;
                        }
                        detailsContent.innerHTML = `
                        <p><strong>Title:</strong> ${data.title}</p>
                        <p><strong>Date:</strong> ${data.startDate}</p>
                        <p><strong>Recurrence:</strong> ${data.recurrencePattern}</p>
                        <p><strong>Description:</strong> ${data.description || 'N/A'}</p>
                        <p><strong>Contacts:</strong> ${
                            data.contacts.map(c => c.name).join(', ')
                        }</p>
                    `;
                        detailsModal.style.display = 'flex';
                    })
                    .catch(err => {
                        console.error('Details fetch error:', err);
                        alert('An error occurred while fetching event details.');
                    });
            });
        });

        /** Handle Delete button */
        deleteEventBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const eventId = btn.dataset.id;
                if (confirm('Are you sure you want to delete this event?')) {
                    fetch(`/recurring-events/${eventId}/delete`, { method: 'POST' })
                        .then(() => {
                            location.reload();
                        })
                        .catch(err => {
                            console.error('Failed to delete event:', err);
                            alert('An error occurred while deleting the event.');
                        });
                }
            });
        });

        /** Handle Mark as Important toggle */
        importantEventBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const eventId = btn.dataset.id;
                fetch(`/recurring-events/${eventId}/important`, { method: 'POST' })
                    .then(() => {
                        btn.classList.toggle('important-btn');
                        btn.textContent = btn.classList.contains('important-btn')
                            ? 'Unmark Important'
                            : 'Mark as Important';
                    })
                    .catch(err => {
                        console.error('Failed to toggle importance:', err);
                        alert('An error occurred while toggling importance.');
                    });
            });
        });

        /** Close modals on outside click */
        window.addEventListener('click', (e) => {
            if (e.target === eventModal) {
                eventModal.style.display = 'none';
            }
            if (e.target === detailsModal) {
                detailsModal.style.display = 'none';
            }
        });

        /** Close details modal on button click */
        closeDetailsModal.addEventListener('click', () => {
            detailsModal.style.display = 'none';
        });
    </script>
{% endblock %}
